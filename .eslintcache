[{"/Users/user/projects/qna/src/CreatedQuestions/CreatedQuestions.tsx":"1","/Users/user/projects/qna/src/App.tsx":"2","/Users/user/projects/qna/src/utils/pluralize.ts":"3","/Users/user/projects/qna/src/Form/Form.tsx":"4","/Users/user/projects/qna/src/CreatedQuestions/Question/Question.tsx":"5","/Users/user/projects/qna/src/CreatedQuestions/QuestionList/QuestionList.tsx":"6","/Users/user/projects/qna/src/index.tsx":"7","/Users/user/projects/qna/src/store/questionsSlice.ts":"8","/Users/user/projects/qna/src/Summary/Summary.tsx":"9","/Users/user/projects/qna/src/store/store.ts":"10","/Users/user/projects/qna/src/CreatedQuestions/Question/EditingQuestion.tsx":"11","/Users/user/projects/qna/src/CreatedQuestions/EmptyQuestionList/EmptyQuestionList.tsx":"12"},{"size":1308,"mtime":1610973242124,"results":"13","hashOfConfig":"14"},{"size":936,"mtime":1610971382222,"results":"15","hashOfConfig":"14"},{"size":205,"mtime":1610975108624,"results":"16","hashOfConfig":"14"},{"size":1729,"mtime":1610970800629,"results":"17","hashOfConfig":"14"},{"size":1573,"mtime":1610963373672,"results":"18","hashOfConfig":"14"},{"size":419,"mtime":1610926145374,"results":"19","hashOfConfig":"14"},{"size":620,"mtime":1610917759558,"results":"20","hashOfConfig":"14"},{"size":1516,"mtime":1610928407703,"results":"21","hashOfConfig":"14"},{"size":468,"mtime":1610921669941,"results":"22","hashOfConfig":"14"},{"size":196,"mtime":1610921356215,"results":"23","hashOfConfig":"14"},{"size":1841,"mtime":1610963388292,"results":"24","hashOfConfig":"14"},{"size":220,"mtime":1610963474489,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qfvpfx",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/user/projects/qna/src/CreatedQuestions/CreatedQuestions.tsx",[],"/Users/user/projects/qna/src/App.tsx",[],"/Users/user/projects/qna/src/utils/pluralize.ts",[],"/Users/user/projects/qna/src/Form/Form.tsx",[],"/Users/user/projects/qna/src/CreatedQuestions/Question/Question.tsx",[],"/Users/user/projects/qna/src/CreatedQuestions/QuestionList/QuestionList.tsx",[],"/Users/user/projects/qna/src/index.tsx",[],"/Users/user/projects/qna/src/store/questionsSlice.ts",[],"/Users/user/projects/qna/src/Summary/Summary.tsx",[],"/Users/user/projects/qna/src/store/store.ts",[],"/Users/user/projects/qna/src/CreatedQuestions/Question/EditingQuestion.tsx",["51"],"import React, { useState } from 'react';\nimport { edit } from '../../store/questionsSlice';\nimport './Question.css';\nimport { useDispatch } from 'react-redux';\n\nfunction EditingQuestion(props: EditingQuestionProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [unsavedQuestion, setUnsavedQuestion] = useState(props.question);\n  const [unsavedAnswer, setUnsavedAnswer] = useState(props.answer);\n  const dispatch = useDispatch();\n  return (\n    <article \n      className=\"Question Question--editing\"\n      onClick={() => setIsExpanded(!isExpanded)}\n    >\n      <div className=\"Question-question\">\n        <div className=\"Question-questionText\">\n          <input \n              value={unsavedQuestion}\n              onChange={(e) => setUnsavedQuestion(e.target.value)} \n          />\n        </div>\n        <button\n          className=\"Question-save\"\n          onClick={(e) => {\n            e.stopPropagation();\n            dispatch(edit({\n            id: props.id,\n            question: unsavedQuestion,\n            answer: unsavedAnswer,\n            }))\n            props.setIsEditing(false);\n          }}\n        >✓</button>\n        <button className=\"Question-undo\" onClick={(e) => {\n          e.stopPropagation();\n          props.setIsEditing(false);\n          setUnsavedQuestion(props.question);\n          setUnsavedAnswer(props.answer);\n        }}>⎌</button>\n      </div>\n      <div className=\"Question-answer\">\n        <input \n          value={unsavedAnswer}\n          onChange={(e) => setUnsavedAnswer(e.target.value)} \n        />\n      </div>\n    </article>\n  );\n}\n\ninterface EditingQuestionProps {\n  question: string;\n  answer: string;\n  id: number;\n  setIsEditing: (v: boolean) => void;\n}\n\ninterface QuestionProps {\n    question: string;\n    answer: string;\n    id: number;\n}\n\nexport default EditingQuestion;\n","/Users/user/projects/qna/src/CreatedQuestions/EmptyQuestionList/EmptyQuestionList.tsx",[],{"ruleId":"52","severity":1,"message":"53","line":59,"column":11,"nodeType":"54","messageId":"55","endLine":59,"endColumn":24},"@typescript-eslint/no-unused-vars","'QuestionProps' is defined but never used.","Identifier","unusedVar"]