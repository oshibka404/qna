{"version":3,"sources":["store/questionsSlice.ts","CreatedQuestions/EmptyQuestionList/EmptyQuestionList.tsx","CreatedQuestions/Question/EditingQuestion.tsx","CreatedQuestions/Question/Question.tsx","CreatedQuestions/QuestionList/QuestionList.tsx","Tooltip/Tooltip.tsx","CreatedQuestions/CreatedQuestions.tsx","Form/Form.tsx","Summary/Summary.tsx","utils/pluralize.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["questionsSlice","createSlice","name","initialState","AZSort","list","question","answer","id","reducers","toggleSort","state","clear","add","payload","push","Date","now","deleteQuestion","filter","item","edit","map","actions","selectIsSorted","questions","selectQuestions","slice","sort","a","b","localeCompare","selectCount","length","EmptyQuestionList","className","EditingQuestion","props","useState","isExpanded","setIsExpanded","unsavedQuestion","setUnsavedQuestion","unsavedAnswer","setUnsavedAnswer","dispatch","useDispatch","onClick","value","onChange","e","target","stopPropagation","setIsEditing","Question","isEditing","classNames","QuestionList","Tooltip","tooltipContent","children","CreatedQuestions","azSort","useSelector","Form","qText","setQText","aText","setAText","errorText","setErrorText","errors","validateForm","join","Summary","n","singularForm","pluralForm","count","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","questionsReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.00bb8aab.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const questionsSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    AZSort: false,\n    list: [\n      {\n        question: 'How to add a question?',\n        answer: 'Just use the form below!',\n        id: 0,\n      }\n    ],\n  },\n  reducers: {\n    toggleSort: state => {\n      state.AZSort = !state.AZSort;\n    },\n    clear: state => {\n      state.list = [];\n    },\n    add: (state, {payload}) => {\n      state.list.push({\n        ...payload,\n        id: Date.now(),\n      });\n    },\n    deleteQuestion: (state, {payload}) => {\n      state.list = state.list.filter((item) => item.id !== payload);\n    },\n    edit: (state, {payload}) => {\n      state.list = state.list.map((item) => {\n        if (item.id === payload.id) {\n          return payload;\n        }\n        return item;\n      });\n    }\n  },\n});\n\nexport interface QuestionData {\n  id: number;\n  question: string;\n  answer: string;\n}\n\ninterface AppState {\n  questions: {\n    AZSort: boolean;\n    list: QuestionData[];\n  }\n}\n\nexport const { toggleSort, clear, add, deleteQuestion, edit } = questionsSlice.actions;\n\nexport const selectIsSorted = (state: AppState) => state.questions.AZSort;\n\nexport const selectQuestions = (state: AppState) => state.questions.AZSort\n  ? state.questions.list.slice().sort((a, b) => a.question.localeCompare(b.question))\n  : state.questions.list;\n\nexport const selectCount = (state: AppState) => state.questions.list.length;\n\nexport default questionsSlice.reducer;\n","import React from 'react';\nimport './EmptyQuestionList.css';\n\nfunction EmptyQuestionList() {\n  return (\n    <div className=\"EmptyQuestionList\">\n      No questions yet\n    </div>\n  );\n}\n\nexport default EmptyQuestionList;\n","import React, { useState } from 'react';\nimport { edit } from '../../store/questionsSlice';\nimport './Question.css';\nimport { useDispatch } from 'react-redux';\n\nfunction EditingQuestion(props: EditingQuestionProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [unsavedQuestion, setUnsavedQuestion] = useState(props.question);\n  const [unsavedAnswer, setUnsavedAnswer] = useState(props.answer);\n  const dispatch = useDispatch();\n  return (\n    <article \n      className=\"Question Question--editing\"\n      onClick={() => setIsExpanded(!isExpanded)}\n    >\n      <div className=\"Question-question\">\n        <div className=\"Question-questionText\">\n          <input \n              value={unsavedQuestion}\n              onChange={(e) => setUnsavedQuestion(e.target.value)} \n          />\n        </div>\n        <button\n          className=\"Question-save\"\n          onClick={(e) => {\n            e.stopPropagation();\n            dispatch(edit({\n            id: props.id,\n            question: unsavedQuestion,\n            answer: unsavedAnswer,\n            }))\n            props.setIsEditing(false);\n          }}\n        >✓</button>\n        <button className=\"Question-undo\" onClick={(e) => {\n          e.stopPropagation();\n          props.setIsEditing(false);\n          setUnsavedQuestion(props.question);\n          setUnsavedAnswer(props.answer);\n        }}>⎌</button>\n      </div>\n      <div className=\"Question-answer\">\n        <input \n          value={unsavedAnswer}\n          onChange={(e) => setUnsavedAnswer(e.target.value)} \n        />\n      </div>\n    </article>\n  );\n}\n\ninterface EditingQuestionProps {\n  question: string;\n  answer: string;\n  id: number;\n  setIsEditing: (v: boolean) => void;\n}\n\ninterface QuestionProps {\n    question: string;\n    answer: string;\n    id: number;\n}\n\nexport default EditingQuestion;\n","import React, { useState } from 'react';\nimport classNames from \"classnames\";\nimport { deleteQuestion } from '../../store/questionsSlice';\nimport './Question.css';\nimport { useDispatch } from 'react-redux';\nimport EditingQuestion from './EditingQuestion';\n\nfunction Question(props: QuestionProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useDispatch();\n  return isEditing \n      ? (\n        <EditingQuestion \n          {...props}\n          setIsEditing={setIsEditing} \n        />\n      ) : (\n        <article \n          className={classNames('Question', {\n            'Question--expanded': isExpanded,\n          })}\n          onClick={() => setIsExpanded(!isExpanded)}\n        >\n          <div className=\"Question-question\">\n            <div className=\"Question-questionText\">\n              — {props.question}\n            </div>\n              \n            <button\n              className=\"Question-edit\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setIsEditing(true);\n              }}\n            >✎</button>\n            <button className=\"Question-delete\" onClick={(e) => {\n              e.stopPropagation();\n              dispatch(deleteQuestion(props.id));\n            }}>✖</button>\n          </div>\n          <div className=\"Question-answer\">\n            — {props.answer}\n          </div>\n        </article>\n      );\n}\n\ninterface QuestionProps {\n    question: string;\n    answer: string;\n    id: number;\n}\n\nexport default Question;\n","import React from 'react';\nimport { QuestionData } from '../../store/questionsSlice';\nimport Question from '../Question/Question';\n\nfunction QuestionList(props: QuestionListProps) {\n  return <div className=\"CreatedQuestions-list\">\n    {props.questions.map(\n      (item) => <Question key={item.id} {...item}/>\n    )}\n  </div>\n}\n\ninterface QuestionListProps {\n  questions: QuestionData[];\n}\n\nexport default QuestionList;\n","import React, { useState } from 'react';\nimport './Tooltip.css';\n\nfunction Tooltip(props : TooltipProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className=\"Tooltip-target\">\n      <div className=\"Tooltip\">\n        {props.tooltipContent}\n      </div>\n      {props.children}\n    </div>\n  );\n}\n\ninterface TooltipProps {\n  children: React.ReactNode;\n  tooltipContent: React.ReactNode;\n}\n\nexport default Tooltip;\n","import React from 'react';\nimport { clear, selectIsSorted, selectQuestions, toggleSort } from '../store/questionsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './CreatedQuestions.css';\nimport EmptyQuestionList from './EmptyQuestionList/EmptyQuestionList';\nimport QuestionList from './QuestionList/QuestionList';\nimport Tooltip from '../Tooltip/Tooltip';\n\nfunction CreatedQuestions() {\n  const azSort = useSelector(selectIsSorted);\n  const questions = useSelector(selectQuestions);\n  const dispatch = useDispatch();\n  return (\n    <div className=\"CreatedQuestions\">\n        <Tooltip tooltipContent=\"Here you can find the created questions and their answers\">\n          <h2>Created questions</h2>\n        </Tooltip>\n        {\n          questions.length > 0\n            ? <QuestionList questions={questions}/>\n            : <EmptyQuestionList />\n        }\n        <div className=\"CreatedQuestions-footer\">\n          <button onClick={() => dispatch(toggleSort())}>{\n            azSort \n              ? 'Sort by time'\n              : 'Sort A‑Z'\n          }</button>\n          <button \n            className=\"CreatedQuestions-removeAll\"\n            onClick={() => dispatch(clear())}\n          >Remove questions</button>\n        </div>\n    </div>\n  );\n}\n\nexport default CreatedQuestions;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { add } from '../store/questionsSlice';\nimport Tooltip from '../Tooltip/Tooltip';\nimport './Form.css';\n\nfunction Form() {\n  const [qText, setQText] = useState('');\n  const [aText, setAText] = useState('');\n  const [errorText, setErrorText] = useState<string|null>(null);\n  const dispatch = useDispatch();\n\n  function resetForm() {\n    setQText('');\n    setAText('');\n  }\n\n  function validateForm() : string[] {\n    const errors : string[] = [];\n\n    if (qText.length === 0) {\n      errors.push('Question text is empty');\n    }\n\n    if (aText.length === 0) {\n      errors.push('Answer text is empty');\n    }\n\n    return errors;\n  }\n\n  function submitForm() {\n    const errors = validateForm();\n    if (errors.length) {\n      setErrorText(errors.join(', '))\n      return; \n    } else {\n      dispatch(add({\n        question: qText,\n        answer: aText,\n      }));\n      resetForm();\n      setErrorText(null);\n    }\n  }\n  return (\n    <div className=\"Form\">\n      <Tooltip tooltipContent=\"Here you can create questions and their answers\">\n        <h2>Create a new question</h2>\n      </Tooltip>\n      <label className=\"Form-label\">\n        Question:\n        <input value={qText} onChange={(e) => {\n          setQText(e.target.value);\n        }} />\n      </label>\n      <label className=\"Form-label\">\n        Answer:\n        <textarea value={aText} onChange={(e) => {\n          setAText(e.target.value);\n        }} />\n      </label>\n      <div className=\"Form-footer\">\n        <button onClick={submitForm}>Create question</button>\n        <span className=\"Form-error\">{errorText}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectCount } from '../store/questionsSlice';\nimport pluralize from '../utils/pluralize';\nimport './Summary.css';\n\nfunction Summary() {\n  const count = useSelector(selectCount);\n  return (\n    <div className=\"Summary\">\n        Here you can find {count} {pluralize(count, 'question', 'questions')}.\n        Feel free to create your own questions!\n    </div>\n  );\n}\n\nexport default Summary;\n","export default function pluralize(\n    n: number,\n    singularForm: string,\n    pluralForm: string\n) {\n    if (n % 10 === 1 && n % 100 !== 11) {\n        return singularForm;\n    }\n    return pluralForm;\n}\n","import React from 'react';\nimport './App.css';\nimport CreatedQuestions from './CreatedQuestions/CreatedQuestions';\nimport Form from './Form/Form';\nimport Summary from './Summary/Summary';\nimport './Summary/Summary.tsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <aside className=\"App-sidebar\">\n        <h1 className=\"App-logo\">Q|A</h1>\n        <section className=\"App-summary\">\n          <Summary />\n        </section>\n        <footer className=\"App-footer\">\n          Made by{' '}\n          <a href=\"https://github.com/oshibka404\">Andrey Ozornin</a>{' '}\n          on 17th of January, 2020 as a test assignment for Studocu.\n        </footer>\n      </aside>\n      <div className=\"App-content\">\n        <section className=\"App-questions\">\n          <CreatedQuestions />\n        </section>\n        <section className=\"App-form\">\n          <Form />\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport questionsReducer from './questionsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    questions: questionsReducer,\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}